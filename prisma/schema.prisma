generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(255)
  users User[] @relation("UserRoles")

  @@map("roles")
}

model User {
  id            String   @id @default(uuid())
  username      String   @unique() @db.VarChar(255)
  email         String   @unique @default("") @db.VarChar(255)
  password      String   @db.VarChar(255)
  role_id       Int      @db.Int
  refresh_token String?  @db.Text
  created_at    DateTime @default(now()) @db.Timestamp(2)
  updated_at    DateTime @default(now()) @db.Timestamp(2)

  role           Role             @relation("UserRoles", fields: [role_id], references: [id])
  institution    Institution?     @relation("UserInstitution")
  teacher        Teacher?         @relation("UserTeacher")
  family         Family?          @relation("UserFamily")
  nutrition      Nutrition[]      @relation("UserNutrition")
  recommendation Recommendation[] @relation("UserSubmittedRecommendations")

  @@map("users")
}

model InstitutionType {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(2)
  updated_at DateTime @default(now()) @db.Timestamp(2)

  institutions Institution[] @relation("InstitutionType")

  @@map("institution_types")
}

model Institution {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  email       String   @db.VarChar(255)
  address     String   @db.VarChar(255)
  phone       String   @db.VarChar(255)
  user_id     String?  @unique @db.VarChar(255)
  city_id     Int?     @db.Int
  province_id Int?     @db.Int
  type        Int      @db.Int
  created_at  DateTime @default(now()) @db.Timestamp(2)
  updated_at  DateTime @default(now()) @db.Timestamp(2)

  city             City?           @relation("CityInstitution", fields: [city_id], references: [id])
  province         Province?       @relation("ProvinceInstitution", fields: [province_id], references: [id])
  user             User?           @relation("UserInstitution", fields: [user_id], references: [id], onDelete: Cascade)
  institution_type InstitutionType @relation("InstitutionType", fields: [type], references: [id])
  teachers         Teacher[]       @relation("InstitutionTeacher")
  familyMember     FamilyMember[]  @relation("FamilyMemberInstitution")
  student          Student[]       @relation("StudentInstitution")
  Response         Response[]      @relation("InstitutionResponse")

  @@map("institutions")
}

model Province {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(2)
  updated_at DateTime @default(now()) @db.Timestamp(2)

  institutions Institution[] @relation("ProvinceInstitution")
  city         City[]        @relation("ProvinceCity")

  @@map("provinces")
}

model City {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(255)
  province_id Int      @db.Int
  created_at  DateTime @default(now()) @db.Timestamp(2)
  updated_at  DateTime @default(now()) @db.Timestamp(2)

  institutions Institution[] @relation("CityInstitution")
  province     Province      @relation("ProvinceCity", fields: [province_id], references: [id])

  @@map("cities")
}

model Category {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  path       String?  @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(2)
  updated_at DateTime @default(now()) @db.Timestamp(2)

  @@map("categories")
}

//** all attributes for the question case start

model Quesioner {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String   @db.Text
  created_at  DateTime @default(now()) @db.Timestamp(2)
  updated_at  DateTime @default(now()) @db.Timestamp(2)

  questions Question[] @relation("QuesionerQuestions")
  Response  Response[] @relation("QuesionerResponse")

  @@map("quesioners")
}

model Question {
  id           Int          @id @default(autoincrement())
  quesioner_id Int          @db.Int
  title        String       @db.Text
  type         QuestionType
  is_required  Boolean      @default(true)
  created_at   DateTime     @default(now()) @db.Timestamp(2)
  updated_at   DateTime     @default(now()) @db.Timestamp(2)

  Quesioner Quesioner? @relation("QuesionerQuestions", fields: [quesioner_id], references: [id])
  options   Option[]   @relation("QuestionOptions")

  @@map("questions")
}

enum QuestionType {
  MULTIPLE_CHOICE
  BOOLEAN
  SCALE
  TEXT
}

model Option {
  id          Int      @id @default(autoincrement())
  question_id Int      @db.Int
  title       String   @db.VarChar(255)
  score       Int?     @default(0) @db.Int
  created_at  DateTime @default(now()) @db.Timestamp(2)
  updated_at  DateTime @default(now()) @db.Timestamp(2)

  Question Question? @relation("QuestionOptions", fields: [question_id], references: [id])

  @@map("options")
}

//** all attributes for the question case end

model Teacher {
  id         String   @id @default(uuid())
  fullName   String   @db.VarChar(255)
  role       String?  @db.VarChar(255)
  address    String   @db.VarChar(255)
  phone      String   @db.VarChar(255)
  user_id    String?  @unique @db.VarChar(255)
  school_id  Int      @db.Int
  created_at DateTime @default(now()) @db.Timestamp(2)
  updated_at DateTime @default(now()) @db.Timestamp(2)

  user        User?       @relation("UserTeacher", fields: [user_id], references: [id], onDelete: Cascade)
  institution Institution @relation("InstitutionTeacher", fields: [school_id], references: [id], onDelete: Cascade)
  classes     Class[]     @relation("TeacherClass")

  @@map("teachers")
}

model Class {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(2)
  updated_at DateTime @default(now()) @db.Timestamp(2)
  teacher_id String?  @db.VarChar(255)

  teacher  Teacher?  @relation("TeacherClass", fields: [teacher_id], references: [id], onDelete: SetNull)
  students Student[] @relation("ClassStudent")

  @@map("classes")
}

//** all attributes for the family case start

model Family {
  id         String   @id @default(uuid())
  created_at DateTime @default(now()) @db.Timestamp(2)
  updated_at DateTime @default(now()) @db.Timestamp(2)
  userId     String   @unique @db.VarChar(255)

  user         User           @relation("UserFamily", fields: [userId], references: [id], onDelete: Cascade)
  familyMember FamilyMember[] @relation("FamilyMemberFamily")

  @@map("families")
}

enum GENDER {
  L
  P
}

enum EDUCATION {
  SD
  SMP
  SMA
  D1
  D2
  D3
  S1
  S2
  S3
}

enum RELATION {
  AYAH
  IBU
  ANAK
  LAINNYA
}

model FamilyMember {
  id            String    @id @default(uuid())
  fullName      String    @db.VarChar(255)
  birthDate     DateTime  @db.Date
  education     EDUCATION
  jobId         Int?      @db.Int
  residenceId   Int       @db.Int
  gender        GENDER
  relation      RELATION
  familyId      String    @db.VarChar(255)
  institutionId Int?      @db.Int
  phone         String?   @db.VarChar(255)
  isCompleted   Boolean   @default(false)
  createdAt     DateTime  @default(now()) @db.Timestamp(2)
  updatedAt     DateTime  @default(now()) @db.Timestamp(2)

  family      Family       @relation("FamilyMemberFamily", fields: [familyId], references: [id], onDelete: Cascade)
  job         Job?         @relation("FamilyMemberJob", fields: [jobId], references: [id], onDelete: SetNull)
  residence   Residence    @relation("FamilyMemberResidence", fields: [residenceId], references: [id], onDelete: Cascade)
  nutrition   Nutrition[]  @relation("FamilyMemberNutrition")
  institution Institution? @relation("FamilyMemberInstitution", fields: [institutionId], references: [id], onDelete: SetNull)
  student     Student?     @relation("StudentFamilyMember")
  Response    Response[]   @relation("FamilyMemberResponse")

  @@map("family_members")
}

enum JOBTYPE {
  PEKERJA_TETAP
  PEKERJA_TIDAK_TETAP
  PEKERJA_PARUH_WAKTU
  PEKERJA_FREELANCE
  PEKERJA_MUSIMAN
  PEKERJA_KONTRAK
  PEGAWAI_NEGERI_SIPIL
  PEGAWAI_BUMN
  PEGAWAI_SWASTA
}

model JobType {
  id        Int      @id @default(autoincrement()) @db.Int
  name      String?  @db.VarChar(255)
  type      JOBTYPE
  createdAt DateTime @default(now()) @db.Timestamp(2)
  updatedAt DateTime @default(now()) @db.Timestamp(2)
  job       Job[]    @relation("JobTypeJob")

  @@map("job_types")
}

enum SALARY {
  KURANG_DARI_SATU_JUTA
  SATU_JUTA_SAMPAI_DUA_JUTA
  DUA_JUTA_SAMPAI_TIGA_JUTA
  TIGA_JUTA_SAMPAI_EMPAT_JUTA
  EMPAT_JUTA_SAMPAI_LIMA_JUTA
  LIMA_JUTA_SAMPAI_ENAM_JUTA
  ENAM_JUTA_SAMPAI_TUJUH_JUTA
  TUJUH_JUTA_SAMPAI_DELAPAN_JUTA
  DELAPAN_JUTA_SAMPAI_SEMBILAN_JUTA
  SEMBILAN_JUTA_SAMPAI_SEPULUH_JUTA
  LEBIH_DARI_SEPULUH_JUTA
}

model Job {
  id        Int      @id @default(autoincrement()) @db.Int
  income    SALARY
  jobTypeId Int      @db.Int
  createdAt DateTime @default(now()) @db.Timestamp(2)
  updatedAt DateTime @default(now()) @db.Timestamp(2)

  jobType      JobType        @relation("JobTypeJob", fields: [jobTypeId], references: [id], onDelete: Cascade)
  familyMember FamilyMember[] @relation("FamilyMemberJob")

  @@map("jobs")
}

enum RESIDENCESTATUS {
  MILIK_SENDIRI
  MENYEWA
  BERSAMA_ORANG_TUA
  LAINNYA
}

model Residence {
  id      Int             @id @default(autoincrement()) @db.Int
  status  RESIDENCESTATUS
  address String?         @db.VarChar(255)

  familyMember FamilyMember[] @relation("FamilyMemberResidence")

  @@map("residences")
}

model Nutrition {
  id                Int      @id @default(autoincrement()) @db.Int
  height            Float    @db.Float
  weight            Float    @db.Float
  bmi               Float?   @db.Float
  birthWeight       Float?   @db.Float
  familyMemberId    String   @unique @db.VarChar(255)
  createdAt         DateTime @default(now()) @db.Timestamp(2)
  updatedAt         DateTime @default(now()) @db.Timestamp(2)
  createdBy         String   @db.VarChar(255)
  nutritionStatusId Int?     @db.Int

  nutritionStatus NutritionStatus? @relation("NutritionStatus", fields: [nutritionStatusId], references: [id], onDelete: SetNull)
  user            User             @relation("UserNutrition", fields: [createdBy], references: [id], onDelete: Cascade)
  familyMember    FamilyMember     @relation("FamilyMemberNutrition", fields: [familyMemberId], references: [id], onDelete: Cascade)

  @@map("nutritions")
}

enum NUTRITIONSTATUS {
  KURUS
  NORMAL
  GEMUK
}

model NutritionStatus {
  id          Int             @id @default(autoincrement()) @db.Int
  status      NUTRITIONSTATUS
  information String?         @db.VarChar(255)
  createdAt   DateTime        @default(now()) @db.Timestamp(2)
  updatedAt   DateTime        @default(now()) @db.Timestamp(2)

  nutrition Nutrition[] @relation("NutritionStatus")

  @@map("nutrition_status")
}

model Student {
  id             String @id @default(uuid())
  schoolId       Int    @db.Int
  familyMemberId String @unique @db.VarChar(255)
  nis            String @unique @db.VarChar(255)
  schoolYear     String @db.VarChar(255)
  semester       String @db.VarChar(255)
  classId        Int    @db.Int

  institution    Institution      @relation("StudentInstitution", fields: [schoolId], references: [id], onDelete: Cascade)
  familyMember   FamilyMember     @relation("StudentFamilyMember", fields: [familyMemberId], references: [id], onDelete: Cascade)
  class          Class?           @relation("ClassStudent", fields: [classId], references: [id], onDelete: Cascade)
  recommendation Recommendation[] @relation("FamilyMemberRecommendation")

  @@map("students")
}

model Response {
  id             String   @id @default(uuid())
  quisionerId    Int      @db.Int
  created_at     DateTime @default(now()) @db.Timestamp(2)
  totalScore     Int?     @default(0) @db.Int
  familyMemberId String?  @db.VarChar(255)
  institutionId  Int?     @db.Int

  quesioner    Quesioner     @relation("QuesionerResponse", fields: [quisionerId], references: [id], onDelete: Cascade)
  answers      Answer[]      @relation("ResponseAnswers")
  familyMember FamilyMember? @relation("FamilyMemberResponse", fields: [familyMemberId], references: [id], onDelete: Cascade)
  Institution  Institution?  @relation("InstitutionResponse", fields: [institutionId], references: [id], onDelete: SetNull)

  @@map("responses")
}

model Answer {
  id            Int      @id @default(autoincrement()) @db.Int
  questionId    Int      @unique() @db.Int
  responseId    String   @db.VarChar(255)
  score         Int?     @default(0) @db.Int
  boolean_value Boolean?
  text_value    String?
  option_id     Int?
  scaleValue    Int?

  response Response @relation("ResponseAnswers", fields: [responseId], references: [id], onDelete: Cascade)

  @@unique([questionId, responseId])
  @@map("answers")
}

//** all attributes for the family case end

enum RecommendationStatus {
  PENDING
  PROCESSED
  COMPLETED
}

model Recommendation {
  id            String               @id @default(uuid())
  studentId     String
  submittedById String
  status        RecommendationStatus @default(PENDING)
  pdfUrl        String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @default(now())

  student      Student        @relation("FamilyMemberRecommendation", fields: [studentId], references: [id], onDelete: Cascade)
  submittedBy  User           @relation("UserSubmittedRecommendations", fields: [submittedById], references: [id])
  Intervention Intervention[] @relation("RecommendationIntervention")

  @@map("recommendations")
}

enum InterventionFor {
  SCHOOL
  PARENT
}

model Intervention {
  id               String          @id @default(uuid())
  recommendationId String
  forType          InterventionFor
  options          Json
  notes            String?
  createdAt        DateTime        @default(now())

  recommendation Recommendation @relation("RecommendationIntervention", fields: [recommendationId], references: [id], onDelete: Cascade)

  @@map("interventions")
}
